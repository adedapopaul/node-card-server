{"version":3,"sources":["../../src/middleware/authMiddleware.test.js"],"names":["chai","require","expect","chaiAsPromised","use","sinon","sinonChai","rewire","auth","expressJwt","jwt","sandbox","create","describe","secret","req","beforeEach","fakeNext","stub","resolves","user","username","id","afterEach","restore","context","jsonStub","returns","statusStub","json","res","status","it","authenticateStub","authenticate","to","be","calledOn","jwtStub","done","token","a","generateAccessToken","have","been","calledOnce","property"],"mappings":"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","file":"authMiddleware.test.js","sourcesContent":["const chai = require('chai');\r\nconst expect = chai.expect;\r\nconst chaiAsPromised = require('chai-as-promised')\r\nchai.use(chaiAsPromised);\r\nconst sinon = require('sinon');\r\nconst sinonChai = require('sinon-chai');\r\nchai.use(sinonChai);\r\nconst rewire = require('rewire');\r\n\r\nvar auth = rewire('./authMiddleware')\r\nvar expressJwt = require('express-jwt')\r\nconst jwt = require('jsonwebtoken') ;\r\n\r\nvar sandbox = sinon.sandbox.create();\r\n\r\ndescribe('Auth Middleware', () =>{\r\n    let secret, req\r\n\r\n    beforeEach(()=>{\r\n        fakeNext = () =>{\r\n            return sandbox.stub().resolves()\r\n        }\r\n\r\n        req={\r\n                user : {\r\n                    username: 'foo',\r\n                    id: 'id'\r\n                }\r\n            }\r\n\r\n        secret = 'Fake_Secret'\r\n\r\n    })\r\n\r\n    afterEach(() =>{\r\n        sandbox.restore()\r\n    })\r\n\r\n    context('response function', ()=>{\r\n        beforeEach(()=>{          \r\n            jsonStub = sandbox.stub().returns(req)\r\n            statusStub = sandbox.stub().returns({\r\n                json: req\r\n            })\r\n\r\n            res= {\r\n                status: sandbox.stub().returns({\r\n                    json:  jsonStub\r\n                })\r\n            }\r\n\r\n\r\n        })\r\n\r\n        afterEach(()=>{\r\n            sandbox.restore()\r\n        })\r\n\r\n        it('should reject when called with no args', async ()=>{\r\n            // await expect(auth.respond(req,res)).to.have.been.calledOnce;\r\n        })\r\n\r\n    })\r\n\r\n\r\n    context('Authenticate ', ()=>{\r\n        beforeEach(()=>{\r\n            authenticateStub = sandbox.stub(expressJwt)\r\n        })\r\n\r\n        afterEach(()=>{\r\n            sandbox.restore()\r\n        })\r\n\r\n        it('should call authenticate',()=>{\r\n            expect(auth.authenticate).to.be.calledOn;\r\n        })\r\n    })\r\n\r\n    context('generateAccessToken', ()=>{\r\n        beforeEach(async ()=>{\r\n            jwtStub = await sandbox.stub(jwt, 'sign').resolves('fake_jwt')\r\n        })\r\n\r\n        afterEach(()=>{\r\n            sandbox.restore()\r\n        })\r\n\r\n        it('should called jwt', (done)=>{\r\n            req.token = jwtStub\r\n            expect(req.token).to.be.a(\"function\")\r\n            auth.generateAccessToken(req, res, fakeNext)\r\n            expect(jwtStub).to.have.been.calledOnce;\r\n            done()\r\n        })\r\n\r\n        it('should return token value',  (done)=>{\r\n            auth.generateAccessToken(req, res, fakeNext)\r\n            expect(req).to.have.a.property('token')\r\n            done()\r\n        })\r\n    })\r\n\r\n})"]}