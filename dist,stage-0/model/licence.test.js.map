{"version":3,"sources":["../../src/model/licence.test.js"],"names":["chai","require","expect","Licence","describe","it","done","li","validate","err","errors","fullName","to","not","exist","username","serial","imei","phoneSerial","email","count","licenceKey","have","property","equal","undefined"],"mappings":";;AAAA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASF,KAAKE,MAApB;;AAEA,IAAIC,UAAUF,QAAQ,WAAR,CAAd;;AAIAG,SAAS,eAAT,EAA0B,YAAK;AAC3BC,OAAG,oDAAH,EAAyD,UAACC,IAAD,EAAS;AAC9D,YAAIC,KAAK,IAAIJ,OAAJ,EAAT;;AAEAI,WAAGC,QAAH,CAAY,UAACC,GAAD,EAAQ;AAChBP,mBAAOO,IAAIC,MAAJ,CAAWC,QAAlB,EAA4BC,EAA5B,CAA+BC,GAA/B,CAAmCC,KAAnC;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWK,QAAlB,EAA4BH,EAA5B,CAA+BC,GAA/B,CAAmCC,KAAnC;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWM,MAAlB,EAA0BJ,EAA1B,CAA6BE,KAA7B;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWO,IAAlB,EAAwBL,EAAxB,CAA2BC,GAA3B,CAA+BC,KAA/B;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWQ,WAAlB,EAA+BN,EAA/B,CAAkCC,GAAlC,CAAsCC,KAAtC;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWS,KAAlB,EAAyBP,EAAzB,CAA4BC,GAA5B,CAAgCC,KAAhC;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWU,KAAlB,EAAyBR,EAAzB,CAA4BC,GAA5B,CAAgCC,KAAhC;AACAZ,mBAAOO,IAAIC,MAAJ,CAAWW,UAAlB,EAA8BT,EAA9B,CAAiCC,GAAjC,CAAqCC,KAArC;;AAEAR;AAEH,SAZD;AAaH,KAhBD;;AAkBAD,OAAG,4BAAH,EAAiC,UAACC,IAAD,EAAQ;AACrC,YAAIC,KAAK,IAAIJ,OAAJ,CAAY;AACjBa,oBAAQ,KADS;AAEjBG,mBAAO,aAFU;AAGjBJ,sBAAU;AAHO,SAAZ,CAAT;;AAMAb,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,QAA5B,EAAsCX,EAAtC,CAAyCY,KAAzC,CAA+C,KAA/C;AACAtB,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,OAA5B,EAAqCX,EAArC,CAAwCY,KAAxC,CAA8C,aAA9C;AACAtB,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,UAA5B,EAAwCX,EAAxC,CAA2CY,KAA3C,CAAiD,QAAjD;AACAtB,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,UAA5B,EAAwCX,EAAxC,CAA2CY,KAA3C,CAAiDC,SAAjD;AACAvB,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,YAA5B,EAA0CX,EAA1C,CAA6CY,KAA7C,CAAmDC,SAAnD;AACAvB,eAAOK,EAAP,EAAWK,EAAX,CAAcU,IAAd,CAAmBC,QAAnB,CAA4B,aAA5B,EAA2CX,EAA3C,CAA8CY,KAA9C,CAAoDC,SAApD;AACAnB;AACH,KAdD;AAeH,CAlCD","file":"licence.test.js","sourcesContent":["const chai = require('chai');\r\nconst expect = chai.expect;\r\n\r\nvar Licence = require('./licence');\r\n\r\n\r\n\r\ndescribe('Licence Model', () =>{\r\n    it('should not return error if serial field is missing', (done) =>{\r\n        let li = new Licence()\r\n\r\n        li.validate((err) =>{\r\n            expect(err.errors.fullName).to.not.exist;\r\n            expect(err.errors.username).to.not.exist;\r\n            expect(err.errors.serial).to.exist;\r\n            expect(err.errors.imei).to.not.exist;\r\n            expect(err.errors.phoneSerial).to.not.exist;\r\n            expect(err.errors.email).to.not.exist;\r\n            expect(err.errors.count).to.not.exist;\r\n            expect(err.errors.licenceKey).to.not.exist;\r\n\r\n            done()\r\n\r\n        })\r\n    })\r\n\r\n    it('should have optional field', (done)=>{\r\n        let li = new Licence({\r\n            serial: 'foo',\r\n            email: 'foo@bar.com',\r\n            username: 'foobar'\r\n        })\r\n\r\n        expect(li).to.have.property('serial').to.equal('foo');\r\n        expect(li).to.have.property('email').to.equal('foo@bar.com');\r\n        expect(li).to.have.property('username').to.equal('foobar');\r\n        expect(li).to.have.property('fullName').to.equal(undefined );\r\n        expect(li).to.have.property('licenceKey').to.equal(undefined );\r\n        expect(li).to.have.property('phoneSerial').to.equal(undefined );\r\n        done();\r\n    })\r\n})"]}