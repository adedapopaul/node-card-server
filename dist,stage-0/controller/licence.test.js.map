{"version":3,"sources":["../../src/controller/licence.test.js"],"names":["chai","require","expect","chaiAsPromised","use","sinon","sinonChai","rewire","request","licence","mongoose","sandbox","createSandbox","nodemailer","describe","dbFindStub","config","stub","returns","port","db","callsFake","afterEach","restore","context","it","done","Model","resolves","app","get","end","err","response","to","have","been","calledOnce","body","be","an"],"mappings":";;AAWA;;;;;;;;AAXA,IAAMA,OAAOC,QAAQ,MAAR,CAAb;AACA,IAAMC,SAASF,KAAKE,MAApB;AACA,IAAMC,iBAAiBF,QAAQ,kBAAR,CAAvB;AACAD,KAAKI,GAAL,CAASD,cAAT;AACA,IAAME,QAAQJ,QAAQ,OAAR,CAAd;AACA,IAAMK,YAAYL,QAAQ,YAAR,CAAlB;AACAD,KAAKI,GAAL,CAASE,SAAT;AACA,IAAMC,SAASN,QAAQ,QAAR,CAAf;AACA,IAAMO,UAAUP,QAAQ,WAAR,CAAhB;;AAEA,IAAIQ,UAAUF,OAAO,WAAP,CAAd;;AAEA,IAAIG,WAAWT,QAAQ,UAAR,CAAf;AACA,IAAIU,UAAUN,MAAMO,aAAN,EAAd;;AAEA,IAAMC,aAAaZ,QAAQ,YAAR,CAAnB;;AAEAa,SAAS,eAAT,EAA0B,YAAI;AACtB,QAAIC,mBAAJ;;AAGA,QAAIC,SAASL,QAAQM,IAAR,GAAeC,OAAf,CAAuB,EAACC,MAAM,IAAP,EAAvB,CAAb;AACA,QAAIC,KAAKT,QAAQM,IAAR,GAAeI,SAAf,CAAyB,UAACD,EAAD,EAAM;AACpC,eAAOA,GAAGA,EAAH,CAAP;AACH,KAFQ,CAAT;AAGCE,cAAU,YAAI;AACX,YAAIb,UAAUF,OAAO,WAAP,CAAd;AACAI,gBAAQY,OAAR;AACH,KAHA;;AAKLC,YAAQ,OAAR,EAAiB,YAAI;;AAEjBC,WAAG,cAAH;AAAA,+EAAmB,iBAAOC,IAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACfX,6CAAaJ,QAAQM,IAAR,CAAaP,SAASiB,KAAtB,EAA6B,MAA7B,EAAqCC,QAArC,CAA8C,MAA9C,CAAb;AACIC,mCAFW,GAELpB,QAAQ,EAAEO,cAAF,EAAUI,MAAV,EAAR,CAFK;;;AAIfZ,wCAAQqB,GAAR,EAAaC,GAAb,CAAiB,GAAjB,EACK5B,MADL,CACY,GADZ,EAEK6B,GAFL,CAES,UAACC,GAAD,EAAMC,QAAN,EAAiB;AAClB/B,2CAAOa,UAAP,EAAmBmB,EAAnB,CAAsBC,IAAtB,CAA2BC,IAA3B,CAAgCC,UAAhC;AACAnC,2CAAO+B,SAASK,IAAhB,EAAsBJ,EAAtB,CAAyBK,EAAzB,CAA4BC,EAA5B,CAA+B,QAA/B;AACAd,yCAAKM,GAAL;AACH,iCANL;;AAQAN;;AAZe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAnB;;AAAA;AAAA;AAAA;AAAA;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEH,KA/BD;;AAiCA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACH,CAlED","file":"licence.test.js","sourcesContent":["const chai = require('chai');\r\nconst expect = chai.expect;\r\nconst chaiAsPromised = require('chai-as-promised')\r\nchai.use(chaiAsPromised);\r\nconst sinon = require('sinon');\r\nconst sinonChai = require('sinon-chai');\r\nchai.use(sinonChai);\r\nconst rewire = require('rewire');\r\nconst request = require('supertest');\r\n\r\nvar licence = rewire('./licence');\r\nimport Licence from '../model/licence';\r\nvar mongoose = require('mongoose');\r\nvar sandbox = sinon.createSandbox();\r\n\r\nconst nodemailer = require('nodemailer');\r\n\r\ndescribe('licence Route', ()=>{\r\n        let dbFindStub; \r\n        \r\n\r\n        let config = sandbox.stub().returns({port: 3000});\r\n        let db = sandbox.stub().callsFake((db)=>{\r\n            return db(db)\r\n        })\r\n         afterEach(()=>{\r\n            var licence = rewire('./licence');\r\n            sandbox.restore()\r\n        })\r\n\r\n    context('GET /', ()=>{\r\n   \r\n        it('should get /', async (done)=>{\r\n            dbFindStub = sandbox.stub(mongoose.Model, 'find').resolves('fake')\r\n            let app = licence({ config, db })\r\n            \r\n            request(app).get('/')\r\n                .expect(200)\r\n                .end((err, response)=>{\r\n                    expect(dbFindStub).to.have.been.calledOnce\r\n                    expect(response.body).to.be.an('Object')\r\n                    done(err)\r\n                })\r\n\r\n            done()\r\n\r\n        })\r\n\r\n        // it('should throw error', (done)=>{\r\n        //     dbFindStub = sandbox.stub(mongoose.Model, 'find').rejects(new Error('fake_error'))\r\n        //     request(licence).get('/')\r\n        //         .expect(400)\r\n        //         .end((err, response)=>{\r\n        //             expect(dbFindStub).to.have.been.calledOnce\r\n        //             expect(err.message).to.equal('');\r\n        //             done(err)\r\n        //         })\r\n\r\n        //     done()\r\n        // })\r\n\r\n    })\r\n\r\n    // context('GET /:serial', ()=>{\r\n    //     beforeEach(()=>{\r\n    //         sandbox.restore()\r\n    //         licence = rewire('./licence')\r\n    //     })\r\n\r\n    //     it('should get /:serial', (done)=>{\r\n    //         dbFindStub = sandbox.stub(mongoose.Model, 'find').resolves({name: 'fake_serial'})\r\n\r\n    //         request(licence).get('/123')\r\n    //             .expect(200)\r\n    //             .end((err, response)=>{\r\n    //                 expect(dbFindStub).to.have.been.calledOnce\r\n    //                 expect(response.body).to.have.property('name').to.equal('fake_serial');\r\n    //                 done(err)\r\n    //             })\r\n\r\n    //         done()\r\n    //     })\r\n    // })\r\n})"]}